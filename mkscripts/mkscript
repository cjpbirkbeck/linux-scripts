#!/usr/bin/env bash
# This creates any number of shell scripts with the given names.

# Set defaults
name=script
shell_type=bash
for_all=false
comment=true
no_suffix=false

usage () {
  echo -e "Automatically writes a blank script for a given script.\n \
usage mkscript [-a|--all] [-d|--directory] [-s|-suffix] [-t|--type program name] files\n \
   -a|--all                    set script to be executable for all user \n\
    -d|--directory location     sets the directory where scripts will be placed \n\
    -s|--suffix                 supresses suffixes for shell scripts. \n\
    -t|--type script-type       changes the type of the script. "
  exit 1;
}

# This will get the various elements for making the script.
set_elements() {
  case "$shell_type" in
    "bash")
      hashbang="#!/usr/bin/env bash"
      suffix=".sh"
      comment_start="#"
      comment_end=""
      no_suffix=true
      ;;
    "python" | "python3" )
      hashbang="#!/usr/bin/env nix-shell \\n#! nix-shell -i python3 \"python3.withPackages(ps: [])\""
      suffix=".sh"
      comment_start="#"
      comment_end=""
      ;;
    "python2" )
      hashbang="#!/usr/bin/env nix-shell \\n#! nix-shell -i python2 \"python3.withPackages(ps: [])\""
      suffix=".sh"
      comment_start="#"
      comment_end=""
      ;;
    "python-nix" | "python3-nix" )
      hashbang=""
      suffix=".py"
      comment_start="#"
      comment_end=""
      ;;
    "python2-nix" )
      hashbang=""
      suffix=".py"
      comment_start="#"
      comment_end=""
      ;;
    "nix" )
      hashbang="#!/usr/bin/env nix-shell"
      suffix=".nix"
      comment_start="#"
      comment_end=""
      ;;
    * )
      hashbang="#!/bin/sh"
      suffix=".sh"
      comment_start="#"
      comment_end=""
      no_suffix=true
      ;;
  esac
}

mktemplated () {
  cp ~/Templates/shell .
  mv ./shell $name
}

# Makes the file in a given location.
create () {
  if [ $no_suffix = false ] && [ $shell_type = "bash" ] || [ $shell_type = "bourne" ]; then
    name+=${suffix}
  fi
  touch $name
  echo -e "${hashbang}" >> $name
  if [ $comment ]; then
    echo -e "${comment_start} Description of script goes here. ${comment_end}" >> $name
  fi
}

# Makes a given file executable. By default, will be only executable by the
# owner, but it can be set to be executable by all users.
mkexec ()  {
  if [ ! $for_all ]; then
    chmod u=rwx $name
  else
    chmod 711 $name
  fi
}

if [ -z "$1" ]; then
  echo "No arguments present. Exiting."
  exit 1
fi

while true ; do
  case $1 in
    -h|-\?|--help)
      usage
      exit
      ;;
    -a|--all)
      for_all=true
      shift
      ;;
    -d|--directory)
      if [ "$2" ]; then
        cd "$2" || echo "Cannot find directory. Exiting"; exit 1
        shift
      else
        echo "No directory specified. Exiting."
        exit 1
      fi
      ;;
    -s|--suffix)
      no_suffix=true
      ;;
    -t|--type)
      if [ "$2" ]; then
        shell_type="$2"
        shift
      else
        echo "No type specified. Exiting."
        exit 1
      fi
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'Unknown option ignored: %s\n' "$1" >&2
      ;;
    *)
      break
  esac

  shift
done

for command in "$@"; do
  name=$command
  set_elements
  create
  mkexec
done
